{"version":3,"sources":["components/AddCategory.jsx","components/GifCard.jsx","helpers/getGifs.js","components/Spinner.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","name","id","value","onChange","target","GifCard","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","Spinner","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifApp","props","cat","ReactDOM","render","document","getElementById"],"mappings":"+LAqCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,oCACE,0BAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAC/CN,EAAc,OAOZ,2BACEO,KAAK,OACLC,KAAK,WACLC,GAAG,WACHC,MAAOX,EACPY,SApBkB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,aCWZG,EAfC,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBK,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC1B,OACE,yBAAKC,UAAU,kDACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,uBAAGA,MAAOA,GAAQA,K,uBCPbK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIEG,MAAMR,GAJR,cAIfS,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,IAC7B,MAAO,CACLpB,GAAIoB,EAAIpB,GACRK,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,iBAAE,EAAYC,wBAAd,aAAE,EAA8BhB,QAVlB,kBAaZY,GAbY,4CAAH,sDCiBLK,EAfC,WACZ,OACE,yBAAKhB,UAAU,cACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,gCCcOiB,EApBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACdtB,mBAAS,CACjC4B,KAAM,GACNQ,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAXAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPV,KAAMa,EACNL,SAAS,MAEV,WAEJ,CAACd,IAEGe,EDZ2BM,CAAarB,GAAjCU,EADkB,EACxBJ,KAAcQ,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIlB,UAAU,yCAAyCI,GACtDc,GAAW,kBAAC,EAAD,MACZ,yBAAKlB,UAAU,aACZc,EAAOF,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAASa,IAAKb,EAAIpB,IAAQoB,UESrBc,EAnBA,SAACC,GAAW,IAAD,EACY9C,mBAAS,CAAC,gBADtB,mBACjBQ,EADiB,KACLT,EADK,KAGxB,OACE,oCACE,uCACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGS,EAAWsB,KAAI,SAACiB,GAAD,OACd,kBAAC,EAAD,CAASH,IAAKG,EAAKzB,SAAUyB,UCVvCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f1640131.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [ inputValue, ...categories]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"category\"\r\n          id=\"categoty\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifCard = ( {id, title, url}) => {\r\n    return (\r\n      <div className=\"gif-card animate__animated animate__fadeInLeft\">\r\n        <img src={url} alt={title} />\r\n        <p title={title}>{title}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nGifCard.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default GifCard\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=eYefR1oE4myVOBUHFK4Hd7RlD6acqRLF`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium?.url,\r\n    };\r\n  });\r\n    return gifs;\r\n};\r\n\r\n","import React from 'react'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n      <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Spinner\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GifCard from \"./GifCard\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\r\n      {loading && <Spinner />}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifCard key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 1500);\r\n    });\r\n  }, [category]);\r\n\r\n  return state; // { data: [], loading: true }\r\n};\r\n","import React, { useState } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifApp = (props) => {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((cat) => (\r\n          <GifGrid key={cat} category={cat} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nGifApp.propTypes = {};\r\n\r\nexport default GifApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifApp from './GifApp';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}